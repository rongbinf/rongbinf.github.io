<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Rongbin&#39;s Blog</title>
    <link>https://fanrongbin.com/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Rongbin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 31 Dec 2021 22:48:59 +0800</lastBuildDate>
    <atom:link href="https://fanrongbin.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; 模版类重载流输入输出运算符</title>
      <link>https://fanrongbin.com/cpp-template-friend/</link>
      <pubDate>Fri, 31 Dec 2021 22:48:59 +0800</pubDate>
      <guid>https://fanrongbin.com/cpp-template-friend/</guid>
      <description>在 C++ 中只能通过友元函数来重载流输入输出运算符 &amp;lt;&amp;lt; &amp;gt;&amp;gt;。由于搭配模板类的使用，编译器可能在对应编译友元函数时无法确定其为模版，需要事先声明。
方法 1：提前声明并使用 &amp;lt;&amp;gt; 确认##include &amp;lt;iostream&amp;gt; using namespace std; //需要提前进行声明，以使类中对友元函数的声明进一步确认函数为模板函数 template &amp;lt;class A&amp;gt; class complex; template &amp;lt;class A&amp;gt; ostream &amp;amp; operator &amp;lt;&amp;lt; (ostream &amp;amp;newout, const complex&amp;lt;A&amp;gt; &amp;amp;m); template &amp;lt;class A&amp;gt; class complex{ //以复数类为例 private: A real, image; public: complex(A a, A b):real(a),image(b){ } //在运算符 &amp;lt;&amp;lt; 后加入 &amp;lt;&amp;gt; 以帮助编译器进一步确定该友元函数为模板函数 friend ostream &amp;amp; operator &amp;lt;&amp;lt; &amp;lt;&amp;gt;(ostream &amp;amp;newout, const complex&amp;lt;A&amp;gt; &amp;amp;m); }; template &amp;lt;class A&amp;gt; ostream &amp;amp; operator &amp;lt;&amp;lt; (ostream &amp;amp;newout, const complex&amp;lt;A&amp;gt; &amp;amp;m){ newout&amp;lt;&amp;lt;&amp;#34;(&amp;#34;&amp;lt;&amp;lt;m.</description>
    </item>
    <item>
      <title>C&#43;&#43; 中的拷贝构造函数：浅拷贝、深拷贝</title>
      <link>https://fanrongbin.com/cpp-copy-constructor/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://fanrongbin.com/cpp-copy-constructor/</guid>
      <description>什么时候会调用拷贝构造函数#一个对象以值传递的方式传入函数体 一个对象以值传递的方式从函数返回 一个对象通过另一个对象以进行初始化 默认拷贝构造函数：浅拷贝#即：将被拷贝对象的数据成员的值一一赋值给新创建的对象
如果数据成员中有指针成员 浅拷贝只是增加了一个指针指向已经存在的内存 则新对象的指针所指向的地址与被拷贝对象的指针所指向的地址相同 则析构 delete 对象时会重复 delete 两次同一个内存空间而出错 实例#class Rect{ private: int *p; // 一指针成员 public: Rect(){ // 构造函数，p 指向堆中分配的一内存 p = new int(100); // new 动态分配 } ~Rect(){ // 析构函数，释放动态分配的内存 if(p != NULL){ delete p; // delete 释放 p 所指向的内存 } } }; int main(){ Rect rect1; Rect rect2(rect1); // 拷贝 rect1 来构造 rect2 // 也即： Rect rect2 = rect1; // 浅拷贝，将成员的值进行拷贝 rect2.</description>
    </item>
  </channel>
</rss>
